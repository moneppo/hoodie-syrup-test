/**
 * Hoodie plugin template
 * An example plugin, this is where you put your frontend code (if any)
 */

/* global Hoodie */

Hoodie.extend(function (hoodie) {
  'use strict';
  var appCache = window.applicationCache;

  hoodie.appcache = {};

  hoodie.appcache.status = function() {
		switch (appCache.status) {
		  case appCache.UNCACHED: // UNCACHED == 0
		    return 'UNCACHED';
		  case appCache.IDLE: // IDLE == 1
		    return 'IDLE';
		  case appCache.CHECKING: // CHECKING == 2
		    return 'CHECKING';
		  case appCache.DOWNLOADING: // DOWNLOADING == 3
		    return 'DOWNLOADING';
		  case appCache.UPDATEREADY:  // UPDATEREADY == 4
		    return 'UPDATEREADY';
		  case appCache.OBSOLETE: // OBSOLETE == 5
		    return 'OBSOLETE';
		  default:
		    return 'UKNOWN';
		}
  }

  hoodie.appcache.forceUpdate = function(confirmCb) { 	
  	window.applicationCache.addEventListener('updateready', function(e) {
    	if (window.applicationCache.status == window.applicationCache.UPDATEREADY) {
      	// Browser downloaded a new app cache.
      	var reload = true;
      	if (confirmCb) {
      		reload = confirmCb();
      	}

      	if (reload) {
        	window.location.reload();
      	}
    	}

    	appCache.update(); 
  	});
  }

  hoodie.appcache.on = function(evt, listener) {
  	// Possible events: 
  	// cached:      Fired after the first cache of the manifest.
  	// checking:    Checking for an update. Always the first event fired in the sequence.
  	// downloading: An update was found. The browser is fetching resources.
  	// error:       The manifest returns 404 or 410, the download failed, or the manifest
  	//              changed while the download was in progress.
  	// noupdate:    Fired after the first download of the manifest.
  	// obsolete:    Fired if the manifest file returns a 404 or 410. This results in the 
  	//              application cache being deleted.
  	// progress:    Fired for each resource listed in the manifest as it is being fetched.
  	// updateready: Fired when the manifest resources have been newly redownloaded.

  	appCache.addEventListener(evt, listener, false);
  }
});